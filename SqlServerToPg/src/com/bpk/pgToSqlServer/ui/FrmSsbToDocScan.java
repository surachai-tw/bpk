/*
 * FrmSsbToDocScan.java
 *
 * Created on Feb 29, 2016, 3:25:13 PM
 */
package com.bpk.pgToSqlServer.ui;

import com.bpk.pgToSqlServer.utility.Utility;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.UIManager;

/**
 *
 * @author surachai.tw
 */
public class FrmSsbToDocScan extends javax.swing.JFrame
{

    private final SyncPatient aSyncPatient = new SyncPatient();
    private Thread aThreadPatient = null;
    private Timer aTimerPatient = null;
    private final SyncVisit aSyncVisit = new SyncVisit();
    private Thread aThreadVisit = null;
    private Timer aTimerVisit = null;
    private final SyncDiagnosis aSyncDiagnosis = new SyncDiagnosis();
    private Thread aThreadDiagnosis = null;
    private Timer aTimerDiagnosis = null;

    /** Creates new form FrmSsbToDocScan */
    public FrmSsbToDocScan()
    {
        try
        {
            javax.swing.plaf.metal.MetalLookAndFeel.setCurrentTheme(new Theme());
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            java.awt.Font aFont = new java.awt.Font("Tahoma", 0, 14);
            UIManager.put("OptionPane.font", aFont);
        } catch (Exception ex)
        {
            ex.printStackTrace();
        }
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        aPnlCenter = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        aBtnSyncPatient = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        aBtnSyncVisit = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        aBtnSyncDx = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sync Data SSB - DocScan");

        aPnlCenter.setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        aBtnSyncPatient.setText("Sync Patient");
        aBtnSyncPatient.setMaximumSize(new java.awt.Dimension(100, 24));
        aBtnSyncPatient.setMinimumSize(new java.awt.Dimension(100, 24));
        aBtnSyncPatient.setPreferredSize(new java.awt.Dimension(100, 24));
        aBtnSyncPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aBtnSyncPatientActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 11, 0);
        jPanel1.add(aBtnSyncPatient, gridBagConstraints);

        aPrgStatusPatient.setMinimumSize(new java.awt.Dimension(24, 24));
        aPrgStatusPatient.setPreferredSize(new java.awt.Dimension(24, 24));
        aPrgStatusPatient.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 11, 11);
        jPanel1.add(aPrgStatusPatient, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        aPnlCenter.add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        aBtnSyncVisit.setText("Sync Visit");
        aBtnSyncVisit.setMaximumSize(new java.awt.Dimension(100, 24));
        aBtnSyncVisit.setMinimumSize(new java.awt.Dimension(100, 24));
        aBtnSyncVisit.setPreferredSize(new java.awt.Dimension(100, 24));
        aBtnSyncVisit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aBtnSyncVisitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 11, 0);
        jPanel2.add(aBtnSyncVisit, gridBagConstraints);

        aPrgStatusVisit.setMinimumSize(new java.awt.Dimension(24, 24));
        aPrgStatusVisit.setPreferredSize(new java.awt.Dimension(24, 24));
        aPrgStatusVisit.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 11, 11);
        jPanel2.add(aPrgStatusVisit, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        aPnlCenter.add(jPanel2, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        aBtnSyncDx.setText("Sync Dx");
        aBtnSyncDx.setMaximumSize(new java.awt.Dimension(100, 24));
        aBtnSyncDx.setMinimumSize(new java.awt.Dimension(100, 24));
        aBtnSyncDx.setPreferredSize(new java.awt.Dimension(100, 24));
        aBtnSyncDx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aBtnSyncDxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 11, 0);
        jPanel3.add(aBtnSyncDx, gridBagConstraints);

        aPrgStatusDx.setMinimumSize(new java.awt.Dimension(24, 24));
        aPrgStatusDx.setPreferredSize(new java.awt.Dimension(24, 24));
        aPrgStatusDx.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 11, 11);
        jPanel3.add(aPrgStatusDx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        aPnlCenter.add(jPanel3, gridBagConstraints);

        getContentPane().add(aPnlCenter, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-400)/2, (screenSize.height-240)/2, 400, 240);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Overridden so we can exit when window is closed
     * @param ev WindowEvent
     */
    protected void processWindowEvent(java.awt.event.WindowEvent ev)
    {
        super.processWindowEvent(ev);
        if (ev.getID() == java.awt.event.WindowEvent.WINDOW_CLOSING)
        {
            if (JOptionPane.showConfirmDialog(this, "Exit program ?", "Confirm", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
            {
                Utility.writeLog(System.getProperty("user.dir")+System.getProperty("file.separator")+"SsbToDocScan.log");
                System.exit(1);
            } else
            {
                this.setVisible(true);
            }
        }
    }

    private void aBtnSyncPatientActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aBtnSyncPatientActionPerformed
    {//GEN-HEADEREND:event_aBtnSyncPatientActionPerformed
        aTimerPatient = new Timer(1000, new ActionListener()
        {

            public void actionPerformed(ActionEvent evt)
            {
                aPrgStatusPatient.setValue(aSyncPatient.getStatus());
                if (aSyncPatient.getStatus() == 100)
                {
                    Toolkit.getDefaultToolkit().beep();
                    aTimerPatient.stop();
                }
            }
        });
        aThreadPatient = new Thread(aSyncPatient);
        aThreadPatient.start();
        aTimerPatient.start();
    }//GEN-LAST:event_aBtnSyncPatientActionPerformed

    private void aBtnSyncVisitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aBtnSyncVisitActionPerformed
    {//GEN-HEADEREND:event_aBtnSyncVisitActionPerformed
        aTimerVisit = new Timer(1000, new ActionListener()
        {

            public void actionPerformed(ActionEvent evt)
            {
                aPrgStatusVisit.setValue(aSyncVisit.getStatus());
                if (aSyncVisit.getStatus() == 100)
                {
                    Toolkit.getDefaultToolkit().beep();
                    aTimerVisit.stop();
                }
            }
        });
        aThreadVisit = new Thread(aSyncVisit);
        aThreadVisit.start();
        aTimerVisit.start();
    }//GEN-LAST:event_aBtnSyncVisitActionPerformed

    private void aBtnSyncDxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aBtnSyncDxActionPerformed
    {//GEN-HEADEREND:event_aBtnSyncDxActionPerformed
        aTimerDiagnosis = new Timer(1000, new ActionListener()
        {

            public void actionPerformed(ActionEvent evt)
            {
                aPrgStatusDx.setValue(aSyncDiagnosis.getStatus());
                if (aSyncDiagnosis.getStatus() == 100)
                {
                    Toolkit.getDefaultToolkit().beep();
                    aTimerDiagnosis.stop();
                }
            }
        });
        aThreadDiagnosis = new Thread(aSyncDiagnosis);
        aThreadDiagnosis.start();
        aTimerDiagnosis.start();
    }//GEN-LAST:event_aBtnSyncDxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            public void run()
            {
                new FrmSsbToDocScan().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aBtnSyncDx;
    private javax.swing.JButton aBtnSyncPatient;
    private javax.swing.JButton aBtnSyncVisit;
    private javax.swing.JPanel aPnlCenter;
    private final javax.swing.JProgressBar aPrgStatusDx = new javax.swing.JProgressBar();
    private final javax.swing.JProgressBar aPrgStatusPatient = new javax.swing.JProgressBar();
    private final javax.swing.JProgressBar aPrgStatusVisit = new javax.swing.JProgressBar();
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
